plugins {
	id 'java'
	id 'java-library'
	id 'fabric-loom' version '0.12-SNAPSHOT' apply false
	id 'io.github.juuxel.loom-quiltflower' version '1.7.1' apply false
	id 'com.github.johnrengelman.shadow' version '7.1.0' apply false
	id 'maven-publish'
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	version = project.mod_version + "." + getVersionSuffix()

	repositories {
		maven { url 'https://jitpack.io' }
		mavenCentral()
	}
}

archivesBaseName = project.archives_base_name
group = project.maven_group

afterEvaluate {
	logger.lifecycle("Version String: ${version}")
}

dependencies {

}

jar.enabled = false

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

String getVersionSuffix() {
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags', '--dirty', '--broken'
		standardOutput = stdout
	}
	stdout = stdout.toString().strip()
	def suffix = ""
	if (stdout.endsWith("-dirty")) {
		stdout = stdout.substring(0, stdout.length() - "-dirty".length())
		suffix = "-dirty"
	}
	if (stdout.endsWith("-broken")) {
		stdout = stdout.substring(0, stdout.length() - "-broken".length())
		suffix = "-broken"
	}
	if (stdout.indexOf('-') < 0) {
		return "0" + suffix;
	}
	def split = stdout.split('-')
	return split[split.length - 2] + suffix
}
